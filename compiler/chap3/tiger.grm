%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE | UMINUS

%nonterm  
    exp 
    | program | l_value
    | decs | dec | typedecs | vardec | fundecs | typedec 
    | ty | ty_fields | more_ty_fields | unit_exp | record_creation
    | array_creation | expseq | record | more_records | record_creation_list
    | func_call | arith_exp | com_exp | bool_exp | fundec | more_exp
    | explist 

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%nonassoc ASSIGN
%nonassoc COLON
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE 
%left UMINUS
%left AND OR
%right THEN ELSE DO
%right OF

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

(* This is a skeleton grammar file, meant to illustrate what kind of
 * declarations are necessary above the %% mark.  Students are expected
 *  to replace the two dummy productions below with an actual grammar. 
 *)

program	: 
    exp				()
exp:
    l_value ()
    | INT ()
    | STRING ()
    | NIL ()
    | unit_exp ()
    | record_creation ()
    | array_creation ()
    | l_value ASSIGN exp ()
    | IF exp THEN exp ELSE exp ()
    | IF exp THEN exp ()
    | WHILE exp DO exp ()
    | FOR ID ASSIGN exp TO exp DO exp  ()
    | BREAK  ()
    | LET decs IN expseq END ()
    | LPAREN expseq RPAREN ()
    | func_call ()
    | arith_exp ()
    | com_exp ()
    | bool_exp ()
    | MINUS exp %prec UMINUS ()

unit_exp: LPAREN RPAREN ()

func_call: ID LPAREN RPAREN ()
    | ID LPAREN explist RPAREN ()

explist: exp more_exp ()

more_exp: ()
    | COMMA exp more_exp ()

decs 
    : ()
    | decs dec ()

dec:
    typedecs ()
    | vardec ()
    | fundecs ()

vardec: VAR ID ASSIGN exp ()
    | VAR ID COLON ID ASSIGN exp ()

fundecs: fundec ()
    | fundecs fundec ()

fundec:
    FUNCTION ID LPAREN ty_fields RPAREN EQ exp ()
    | FUNCTION ID LPAREN ty_fields RPAREN COLON ID EQ exp ()

record_creation: ID LBRACE record_creation_list RBRACE ()
record_creation_list: ()
    | record more_records ()

record: ID EQ exp ()
more_records: ()
    | COMMA record more_records ()

array_creation: ID LBRACK exp RBRACK OF exp ()

expseq: exp ()
    | exp SEMICOLON expseq ()

typedecs :
    typedec ()
    | typedecs typedec ()

typedec: TYPE ID EQ ty ()
ty: ID ()
    | LBRACE ty_fields RBRACE () 
    | ARRAY OF ID ()
ty_fields: ()
    | ID COLON ID more_ty_fields ()
more_ty_fields: ()
    | COMMA ID COLON ID more_ty_fields ()

arith_exp: 
    exp PLUS exp ()
    | exp MINUS exp ()
    | exp TIMES exp ()
    | exp DIVIDE exp ()

com_exp: 
    exp EQ exp ()
    | exp NEQ exp ()
    | exp LT exp ()
    | exp LE exp ()
    | exp GT exp ()
    | exp GE exp ()

bool_exp: exp AND exp ()
    | exp OR exp ()

l_value: 
    ID ()
    | l_value DOT ID  ()
    | l_value LBRACK exp RBRACK ()
