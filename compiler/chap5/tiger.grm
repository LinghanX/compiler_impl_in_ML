structure A = Absyn
open Symbol

%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 
  | UMINUS
  | LOW

%nonterm  program of A.exp
        | exp       of A.exp
        | lvalue    of A.var
        | noidlv    of A.var
        | sequence  of A.exp
        | expSeq    of (A.exp * pos) list
        | expList   of (A.exp * pos) list
        | funcArgs  of A.exp list
        | argList   of A.exp list
        | infixop   of A.exp
        | arithop   of A.exp
        | compop    of A.exp
        | controlexp  of A.exp
        | newarr    of A.exp
        | newrec    of A.exp
        | field     of (symbol * A.exp * pos)
        | recordfields of (symbol * A.exp * pos) list
        | recordList of (symbol * A.exp * pos) list
        | dec       of A.dec
        | decs      of A.dec list
        | ty        of A.ty
        | tydec     of {name: Symbol.symbol, ty: A.ty, pos: pos}
        | tydecs    of {name: Symbol.symbol, ty: A.ty, pos: pos} list
        | tyfields  of A.field list
        | tyfieldList of A.field list
        | tyfield   of A.field
        | vardec    of A.dec
        | vardecs   of A.dec list
        | fundec    of A.fundec
        | fundecs   of A.fundec list

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

(* precedence *)
%nonassoc LOW  (* general precedence directive *)
%nonassoc FUNCTION VAR TYPE THEN DO OF ASSIGN
%right    ELSE
%left     OR
%left     AND
%nonassoc EQ NEQ LT LE GT GE
%left     PLUS MINUS
%left     TIMES DIVIDE
%left     UMINUS   (* precedence for negate *)

%%

program	: exp				(exp)

exp : lvalue      (A.VarExp lvalue)
    | NIL         (A.NilExp)
    | INT         (A.IntExp(INT))
    | STRING      (A.StringExp(STRING, STRINGleft ))
    | infixop     (infixop)
    | controlexp  (controlexp)
    | sequence    (sequence)
    | newarr      (newarr)
    | newrec      (newrec)
    | ID LPAREN funcArgs RPAREN   (A.CallExp {func=symbol ID, args=funcArgs, pos=IDleft})
    | MINUS exp %prec UMINUS  (A.OpExp {left=A.IntExp(0), oper=A.MinusOp, right=exp, pos=MINUSleft})
    | lvalue ASSIGN exp       (A.AssignExp {var=lvalue, exp=exp , pos=lvalueleft})

sequence    : LPAREN expSeq  RPAREN   (A.SeqExp expSeq)

expSeq      :  exp expList            ([(exp, expleft)] @ expList)
            |                         ([])

expList     :  SEMICOLON exp expList  ([(exp, expleft)] @ expList)
            |                         ([])

funcArgs    : exp argList             ([exp] @ argList)
            |                         ([])

argList     : COMMA exp argList       (argList @ [exp])
            |                         ([])

(* in-fix operations *)
infixop     : arithop                 (arithop)
            | compop                  (compop)
            | exp AND exp             (A.IfExp {test=exp1, then'=exp2, else'=SOME(A.IntExp(0)), pos=exp1left})
            | exp OR exp              (A.IfExp {test=exp1, then'=A.IntExp(1), else'=SOME exp2, pos=exp1left})

(* arithmetic operations *)
arithop     : exp PLUS exp            (A.OpExp {left=exp1, oper=A.PlusOp, right=exp2, pos=exp1left})
            | exp MINUS exp           (A.OpExp {left=exp1, oper=A.MinusOp, right=exp2, pos=exp1left})
            | exp TIMES exp           (A.OpExp {left=exp1, oper=A.TimesOp, right=exp2, pos=exp1left})
            | exp DIVIDE exp          (A.OpExp {left=exp1, oper=A.DivideOp, right=exp2, pos=exp1left})

(* comparison operations *)
compop      : exp EQ exp              (A.OpExp {left=exp1, oper=A.EqOp, right=exp2, pos=exp1left})
            | exp NEQ exp             (A.OpExp {left=exp1, oper=A.NeqOp, right=exp2, pos=exp1left})
            | exp LT exp              (A.OpExp {left=exp1, oper=A.LtOp, right=exp2, pos=exp1left})
            | exp LE exp              (A.OpExp {left=exp1, oper=A.LeOp, right=exp2, pos=exp1left})
            | exp GT exp              (A.OpExp {left=exp1, oper=A.GtOp, right=exp2, pos=exp1left})
            | exp GE exp              (A.OpExp {left=exp1, oper=A.GeOp, right=exp2, pos=exp1left})

(* program control expressions *)
controlexp  : IF exp THEN exp ELSE exp  (A.IfExp {test=exp1,then'=exp2,else'=SOME exp3, pos=IFleft})
            | IF exp THEN exp           (A.IfExp {test=exp1,then'=exp2,else'=NONE,pos=IFleft})
            | FOR ID ASSIGN exp TO exp DO exp   (A.ForExp {var=symbol ID, escape= ref false, lo=exp1, hi=exp2, body=exp3, pos=FORleft})
            | WHILE exp DO exp          (A.WhileExp {test=exp1, body=exp2, pos=WHILEleft})
            | BREAK                     (A.BreakExp(BREAKleft))
            | LET decs IN expSeq END    (A.LetExp {decs=decs,body=A.SeqExp(expSeq),pos=LETleft})

newarr      : ID LBRACK exp RBRACK OF exp     (A.ArrayExp {typ=symbol ID, size=exp1, init=exp, pos=IDleft})
newrec      : ID LBRACE recordfields RBRACE   (A.RecordExp {fields=recordfields, typ=symbol ID, pos=IDleft})

field         : ID EQ exp                   ((symbol ID, exp, IDleft))
recordfields  : field recordList            ([field] @ recordList)
              |                             ([])

recordList    : COMMA field recordList      ([field] @ recordList)
              |                             ([])

lvalue      : ID                        (A.SimpleVar(symbol ID, IDleft))
            | noidlv                    (noidlv)

noidlv      : ID LBRACK exp RBRACK      (A.SubscriptVar(A.SimpleVar(symbol ID, IDleft), exp, IDleft))
            | noidlv LBRACK exp RBRACK  (A.SubscriptVar(noidlv,exp, noidlvleft))
            | lvalue DOT ID             (A.FieldVar(lvalue, symbol ID, lvalueleft))

decs        : decs dec  (decs @ [dec])
            |           ([])

dec         : tydecs %prec LOW  (A.TypeDec(tydecs))
            | vardec            (vardec)
            | fundecs %prec LOW (A.FunctionDec(fundecs))

tydecs      : tydec             ([tydec])
            | tydecs tydec      (tydecs @ [tydec])

tydec       : TYPE ID EQ ty     ({name=symbol ID,ty=ty,pos=TYPEleft})

ty          : ID                      (A.NameTy(symbol ID, IDleft))
            | ARRAY OF ID             (A.ArrayTy(symbol ID, ARRAYleft))
            | LBRACE tyfields RBRACE  (A.RecordTy(tyfields))

tyfields    : tyfield tyfieldList       ([tyfield] @ tyfieldList)
            |                           ([])

tyfieldList : COMMA tyfield tyfieldList   ([tyfield] @ tyfieldList)
            |                             ([])

tyfield     : ID COLON ID                 ({name=symbol ID1,escape=ref false,typ=symbol ID2,pos=ID1left})

vardec      : VAR ID ASSIGN exp           (A.VarDec {name=symbol ID,escape=ref false,typ=NONE,init=exp,pos=VARleft})
            | VAR ID COLON ID ASSIGN exp  (A.VarDec {name=symbol ID1,escape=ref false,typ=SOME(symbol ID2, ID2left),init=exp,pos=VARleft})

fundecs     : fundec            ([fundec])
            | fundecs fundec    (fundecs @ [fundec])

fundec      : FUNCTION ID LPAREN tyfields RPAREN EQ exp           ({name=symbol ID,params=tyfields,result=NONE,body=exp,pos=FUNCTIONleft})
            | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp  ({name=symbol ID1,params=tyfields,result=SOME(symbol ID2, ID2left),body=exp,pos=FUNCTIONleft})

